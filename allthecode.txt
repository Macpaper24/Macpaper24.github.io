const canvas = document.getElementById('tetris');
const context = canvas.getContext('2d');

var score = new Audio();
score.src = "sounds/clear.mp3";

context.scale(20, 20);

function arenaSweep() {
    let rowCount = 1;
    outer: for (let y = arena.length -1; y > 0; --y) {
        for (let x = 0; x < arena[y].length; ++x) {
            if (arena[y][x] === 0) {
                continue outer;
            }
        }

        const row = arena.splice(y, 1)[0].fill(0);
        arena.unshift(row);
        ++y;

        player.score += rowCount * 10;
        rowCount *= 2;

    score.play();
    }
}

function collide(arena, player) {
    const m = player.matrix;
    const o = player.pos;
    for (let y = 0; y < m.length; ++y) {
        for (let x = 0; x < m[y].length; ++x) {
            if (m[y][x] !== 0 &&
               (arena[y + o.y] &&
                arena[y + o.y][x + o.x]) !== 0) {
                return true;
            }
        }
    }
    return false;
}

function createMatrix(w, h) {
    const matrix = [];
    while (h--) {
        matrix.push(new Array(w).fill(0));
    }
    return matrix;
}

function createPiece(type)
{
    if (type === 'I') {
        return [
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
            [0, 1, 0, 0],
        ];
    } else if (type === 'L') {
        return [
            [0, 2, 0],
            [0, 2, 0],
            [0, 2, 2],
        ];
    } else if (type === 'J') {
        return [
            [0, 3, 0],
            [0, 3, 0],
            [3, 3, 0],
        ];
    } else if (type === 'O') {
        return [
            [4, 4],
            [4, 4],
        ];
    } else if (type === 'Z') {
        return [
            [5, 5, 0],
            [0, 5, 5],
            [0, 0, 0],
        ];
    } else if (type === 'S') {
        return [
            [0, 6, 6],
            [6, 6, 0],
            [0, 0, 0],
        ];
    } else if (type === 'T') {
        return [
            [0, 7, 0],
            [7, 7, 7],
            [0, 0, 0],
        ];
    }
}

function drawMatrix(matrix, offset) {
    matrix.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value !== 0) {
                context.fillStyle = colors[value];
                context.fillRect(x + offset.x,
                                 y + offset.y,
                                 1, 1);
            }
        });
    });
}

function draw() {
    context.fillStyle = '#000';
    context.fillRect(0, 0, canvas.width, canvas.height);

    drawMatrix(arena, {x: 0, y: 0});
    drawMatrix(player.matrix, player.pos);
}

function merge(arena, player) {
    player.matrix.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value !== 0) {
                arena[y + player.pos.y][x + player.pos.x] = value;
            }
        });
    });
}

function rotate(matrix, dir) {
    for (let y = 0; y < matrix.length; ++y) {
        for (let x = 0; x < y; ++x) {
            [
                matrix[x][y],
                matrix[y][x],
            ] = [
                matrix[y][x],
                matrix[x][y],
            ];
        }
    }

    if (dir > 0) {
        matrix.forEach(row => row.reverse());
    } else {
        matrix.reverse();
    }
}

function playerDrop() {
    player.pos.y++;
    if (collide(arena, player)) {
        player.pos.y--;
        merge(arena, player);
        playerReset();
        arenaSweep();
        updateScore();
    }
    dropCounter = 0;
}

function playerMove(offset) {
    player.pos.x += offset;
    if (collide(arena, player)) {
        player.pos.x -= offset;
    }
}

function playerReset() {
    const pieces = 'TJLOSZI';
    player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
    player.pos.y = 0;
    player.pos.x = (arena[0].length / 2 | 0) -
                   (player.matrix[0].length / 2 | 0);
    if (collide(arena, player)) {
        arena.forEach(row => row.fill(0));
        player.score = 0;
        updateScore();
    }
}

function playerRotate(dir) {
    const pos = player.pos.x;
    let offset = 1;
    rotate(player.matrix, dir);
    while (collide(arena, player)) {
        player.pos.x += offset;
        offset = -(offset + (offset > 0 ? 1 : -1));
        if (offset > player.matrix[0].length) {
            rotate(player.matrix, -dir);
            player.pos.x = pos;
            return;
        }
    }
}

let dropCounter = 0;
let dropInterval = 1000;

let lastTime = 0;
function update(time = 0) {
    const deltaTime = time - lastTime;

    dropCounter += deltaTime;
    if (dropCounter > dropInterval) {
        playerDrop();
    }

    lastTime = time;

    draw();
    requestAnimationFrame(update);
}

function updateScore() {
    document.getElementById('score').innerText = player.score;
}

document.addEventListener('keydown', event => {
    if (event.keyCode === 37) {
        playerMove(-1);
    } else if (event.keyCode === 39) {
        playerMove(1);
    } else if (event.keyCode === 40) {
        playerDrop();
    } else if (event.keyCode === 81) {
        playerRotate(-1);
    } else if (event.keyCode === 87) {
        playerRotate(1);
    }else if (event.keyCode === 87) {
        playerRotate(1);
    }
});

const colors = [
    null,
    '#FF0D72',
    '#0DC2FF',
    '#0DFF72',
    '#F538FF',
    '#FF8E0D',
    '#FFE138',
    '#3877FF',
];

const arena = createMatrix(12, 20);

const player = {
    pos: {x: 0, y: 0},
    matrix: null,
    score: 0,
};

function start() {
    playerReset();
    updateScore();
    update();
}

<html>
<head>
    <title>if u see this u get candy (unless i forget)</title>


  <link rel="stylesheet" type="text/css" href="styles.css">
  <link href="https://fonts.googleapis.com/css?family=Great+Vibes" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

  <script type="text/javascript" src="jqscripts.js"></script>

</head>
<body>

<div class="whiteFade"></div>

<div id="vol">
  
  <img id="volumeThing" src="pics/volume.png" alt="speaker thing idk"
  onclick="mute()">

  <img id="muteThing" src="pics/volumemuted.png" alt="mute lol"
  onclick="unmute()">

</div>

<div id="welcome">

  <img id="city" src="pics/city.jpg" alt="city">

  <div id="divArrow" onclick="help()">
    <img id="arrow" src="pics/arrow.png" alt="city">
  </div>

  <div id="wText">Welcome</div>
  <div id="xText">To My Senior Project</div>
  <div id="yText">by Mack</div>

</div>

<div id="part0">
  
  <div id="left">

  <font color="white">
  <div id="zText">Why I chose this</div>

  <div id="dText"> I discovered programming in 7th grade by taking a short two week class on Khan Academy. Since then I've bought several books, watched many tutorials, and participated in some online college courses on the subject. I learned there was a lot you can do with programming.</div>
  </font>
  </div>

  <div id="right">
    
  <img id="khan" src="pics/khan.jpg" alt="khan">

  </div>

  <div id="divArrow" onclick="help1()">
    <img id="arrow1" src="pics/arrow.png" alt="city">
  </div>

</div>

<div id="part3">
    <div id="left">
       <iframe width="560" height="315" src="https://www.youtube.com/embed/FCMxA3m_Imc" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
    </div>
    <div id="right">
      <div id="zText">But What Is Programming?</div>
      <div id="dText">It's a way for people to communicate with computers. Almost every digital electronic has some programming in it. </div>
      <div class="halfCircle"></div>
    </div>


  <div id="divArrow" onclick="help2()">
    <img id="arrow1" src="pics/arrow.png" alt="city">
  </div>
</div>

<div id="part4">
    <div id="left">
      <div id="zText">The Project</div>
      <div id="dText"> My original idea was to make a multiplayer tetris game with like a chat box and other cool features but I'm dumb and couldn't figure out how to do it. </div>
    </div>
    <div id="right"></div>
  <div id="divArrow" onclick="help3()">
    <img id="arrow1" src="pics/arrow.png" alt="city">
  </div>
</div>



<div id="part2">
    <div id="start" onclick="start()">Start</div>
</div>

<div id="container">
    <div id="score"></div>
    <canvas id="tetris" width="240" height="400"></canvas>
    <script src="tetris.js"></script>
</div>
<div id="part1">
    
  <div class="fuck">All the code</div>

</div>
<div class="tex">
  
  <embed src="allthecode.txt">

</div>

</body>
</html>

html /* <--  lol fuck u scroll */
{
  margin: 0px;
  padding: 0px;
  overflow-x: hidden;
}

body
{
  margin: 0px;
  padding: 0px;
}

img
{
  background-attachment: fixed;
  z-index: 5;
}

h1
{
  width: 100%;
  height: 100%;
}

#container
{
  width: 100%;
  background: black;
  color: #fff;
  font-family: sans-serif;
  font-size: 2em;
  text-align: center;
}

#welcome
{ 
  margin: 0 auto;
  padding: 0px;
  top: 0;
  background-color: #ff8038;
  width: 100vw;
  height: 100%;
}

#wText
{
  font-family: 'Montserrat', sans-serif;
  font-size: 50px;
  text-align: center;
  padding: 5%;
  margin: auto;
}

#xText
{
  font-weight: bold;
  font-family: 'Montserrat', sans-serif;
  font-size: 50px;
  text-align: center;
  padding: 0;
  margin: auto;
}

#yText
{
  font-weight: bold;
  text-align: center;
  font-size: 30px;
  padding: 10%;
  margin: auto;
}

#dText
{
  line-height: 45px;
  font-family: 'Montserrat', cursive;
  font-size: 30px;
  padding: 5%;
  margin: auto;
  z-index: 10;
}

#zText
{
  font-weight: bold;
  font-family: 'Montserrat', sans-serif;
  font-size: 50px;
  padding: 5%;
  margin: auto;
  margin-top: 30%;
}

#left
{
  border-radius: 20px;
  width: 50%;
  height: 75%;
  float: left;
}

#right
{
  border-radius: 20px;
  width: 50%;
  height: 75%;
  float: right;
}

#city
{
  margin: 0 auto;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  position: fixed;
  z-index: -1;
}

#arrow
{
  opacity: 0.3;
  transition: opacity .3s ease-out;
  position: absolute;
  margin: 0 auto;
  margin-top: 100px;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100px;
  height: 100px;
}

#arrow1
{  
  opacity: 0.3;
  transition: opacity .3s ease-out;
  margin: 0 auto;
  margin-top: 100px;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100px;
  height: 100px;
}

#arrow:hover
{
  opacity: 1;
  cursor: pointer;
}

#arrow1:hover
{
  opacity: 1;
  cursor: pointer;
}

#part0
{
  background: #4d4d4d;
  width: 100%;
  height: 100vh;
}

#part1
{
  text-align: center;
  width: 100%;
  height: 400px;
  line-height: 400px;
}

#part2
{
  background-color: gray;
  background: grey;
  width: 100%;
  height: 75px;
}

#part3
{
  position: relative;
  background: #a8eaff;
  width: 100%;
  height: 100vh;
  z-index: 9;
}


#part4
{
  background: linear-gradient(to right, #88cc48, white);
  width: 100%;
  height: 100vh;
}

#part5
{

  background: white;
  width: 100%;
  height: 50vh;
}


#start
{
  opacity: 0.5;
  font-family: 'Montserrat', cursive;
  font-size: 60px;
  text-align: center;
}

#start:hover
{
  opacity: 1;
  cursor: pointer;
}

#khan
{
  height: 70%;
  width: 80%;
  display: block;
  margin: auto;
  margin-top: 30%;
}

#volumeThing
{
  position: fixed;
  width: 150px;
  height: 150px;
}

#volumeThing:hover
{
  cursor: pointer;
}

#muteThing
{
  position: fixed;
  width: 150px;
  height: 150px;
}

#muteThing:hover
{
  cursor: pointer;
}


.halfCircle
{
  z-index: -1;
  position: absolute;
  bottom: 0;
  height: 700px;
  width: 1400px;
  border-radius: 1400px 1400px 0 0;
  background: #7ec6ed;
}

.tex
{
  background: grey;
}


.whiteFade
{
  z-index: 10000;
  background: white;
  position: fixed;
  width: 100vw;
  height: 100vh;
}

.fuck
{
  font-weight: bold;
  font-family: 'Montserrat', sans-serif;
  font-size: 100px;
  margin: auto;
}

embed
{
  background: white;
  display: block;
  margin: auto;
  height: 80vh;
  width: 80vw;
}

canvas 
{
  border: solid .2em #707070;
  height: 90vh;
}

button
{
  width: 50px;
  height: 25px;
}

iframe
{
  display: block;
  margin: auto;
  margin-top: 20%;
}

var vsauce = new Audio();
vsauce.src = "sounds/vsauce.mp3";
function help() {
    target_offset = $("#part0").offset(),
    target_top = target_offset.top;
    $('html, body').animate({
        scrollTop: target_top
    }, 600);
}

function help1() {
    target_offset = $("#part3").offset(),
    target_top = target_offset.top;
    $('html, body').animate({
        scrollTop: target_top
    }, 600);
    vsoss();
}

function help2() {
    target_offset = $("#part4").offset(),
    target_top = target_offset.top;
    $('html, body').animate({
        scrollTop: target_top
    }, 1200);
}

function help3() {
    target_offset = $("#container").offset(),
    target_top = target_offset.top;
    $('html, body').animate({
        scrollTop: target_top
    }, 600);
}



function vsoss() {
    $("#volumeThing").show();
    vsauce.play();
    vsauce.volume = 0.1;
    setTimeout(function() {
        $("#volumeThing").hide();
        $("#muteThing").hide();
    }, 93000);
}

function mute() {
    if(!vsauce.muted) {
        vsauce.muted = true;
    }
    $("#volumeThing").hide();
    $("#muteThing").show();
}

function unmute() {
    if(vsauce.muted) {
        vsauce.muted = false;
    }
    $("#volumeThing").show();
    $("#muteThing").hide();
}

$(document).ready(function() {
    $(".whiteFade").fadeOut(1000);
    $("#volumeThing").hide();
    $("#muteThing").hide();
    $("#wText").hide().delay(1000).fadeIn(1500);
    $("#xText").hide().delay(2500).fadeIn(1500);
    $("#yText").hide().delay(5000).fadeIn(500);
});
